- name: clickhouse-keeper deploy script
  hosts: keeper
  user: root
  serial: 1
  tasks:

    - name: Install system packages
      ansible.builtin.apt:
        update_cache: yes
        pkg:
          - screen
          - pv
          - apt-transport-https 
          - ca-certificates 
          - dirmngr
          - ncat

    - name: Stop service clickhouse-keeper 
      ansible.builtin.systemd:
        name: clickhouse-keeper
        state: stopped

    - name: Add the APT Key for ClickHouse.
      apt_key:
        keyserver: "{{ clickhouse_key_server }}"
        id: "{{ clickhouse_deb_rep_key }}"
        state: present
      # become: true

    - name: Add ClickHouse APT sources
      apt_repository:
        repo: "{{ clickhouse_deb_rep }}"
        state: present

    # It is assumed that clickhouse-server creates user and group clickhouse. They are used along the role.
    - name: Install ClickHouse Keeper
      apt:
        pkg:
          - clickhouse-keeper={{ clickhouse_version }}
          # - clickhouse-client={{ clickhouse_version }}
          # - clickhouse-common-static={{ clickhouse_version }}


    - name: Generate SSL cert
      command: openssl req -subj "/CN=localhost" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-keeper/server.key -out /etc/clickhouse-keeper/server.crt
      args: 
        creates: /etc/clickhouse-keeper/server.crt

    - name: Change ssl cert permissions
      file:
        path: /etc/clickhouse-keeper/server.crt
        owner: clickhouse
        group: clickhouse

    - name: Change ssl key permissions
      file:
        path: /etc/clickhouse-keeper/server.key
        owner: clickhouse
        group: clickhouse

    - name: Config
      template: src=keeper.xml dest=/etc/clickhouse-keeper/keeper_config.xml
      # delegate_to: 127.0.0.1
      # run_once: yes

    - name: Enable service clickhouse-keeper 
      ansible.builtin.systemd:
        name: clickhouse-keeper
        state: started

    # TODO: check something more sophisticated, for example, ensure the servers are talking to each other
    - name: Run echo ruok command and get the result
      shell: echo ruok | ncat --ssl localhost 9181
      register: ncat_result
      changed_when: false
      retries: 5  # Retry up to 10 times
      delay: 1    # Delay 1 second between retries
      until: "'imok' in ncat_result.stdout"  # Continue retrying until this condition is met


    # - name: Copy systemd
      # copy: src=scratchdb.service dest=/lib/systemd/system/scratchdb.service mode=0755

    # - name: Force systemd to reread configs
    #   ansible.builtin.systemd:
    #     daemon_reload: true

    # - name: Set server status to unhealthy
    #   copy:
    #     content: ""
    #     dest: ./unhealthy

    # - name: Get Hetzner server ID
    #   uri:
    #     url: "http://169.254.169.254/hetzner/v1/metadata/instance-id"
    #     return_content: true
    #   register: server_id

    # - name: Wait for Hetzner to remove node from LB
    #   uri:
    #     url: "https://api.hetzner.cloud/v1/load_balancers/{{hetzner_lb_id}}"
    #     return_content: true
    #     headers:
    #       Authorization: "Bearer {{hetzner_api_key}}"
    #   register: lb_response
    #   until: >-
    #       (
    #       lb_response.json.load_balancer.targets
    #       | selectattr('server.id', '==', server_id.content | int)
    #       ).0.health_status.0.status == 'unhealthy'
    #   retries: 5
    #   delay: 5
          
    # - name: Get latest version URL
    #   uri:
    #     url: https://api.github.com/repos/scratchdata/scratchdb/releases/latest
    #     return_content: true
    #   register: json_response

    # - name: "installing scratchdb {{ json_response.json.tag_name }}"
    #   loop: "{{ json_response.json.assets }}"
    #   when: "'_Linux_x86_64.tar.gz' in item.name"
    #   unarchive:
    #     remote_src: yes
    #     src: "{{ item.browser_download_url }}"
    #     dest: ./
    #     keep_newer: yes

    # - name: stop go service
    #   systemd:
    #     name: scratchdb
    #     state: stopped

    # - name: Copy scratchdb config
    #   copy: src=prod.toml dest=/root/prod.toml mode=0755

    # - name: start go service
    #   systemd:
    #     name: scratchdb
    #     state: started

    # - name: Set server to healthy status
    #   ansible.builtin.file:
    #     state: absent
    #     path: ./unhealthy

    # - name: Wait for Hetzner to re-add node to LB
    #   uri:
    #     url: "https://api.hetzner.cloud/v1/load_balancers/{{hetzner_lb_id}}"
    #     return_content: true
    #     headers:
    #       Authorization: "Bearer {{hetzner_api_key}}"
    #   register: lb_response
    #   until: >-
    #       (
    #       lb_response.json.load_balancer.targets
    #       | selectattr('server.id', '==', server_id.content | int)
    #       ).0.health_status.0.status == 'healthy'
    #   retries: 5
    #   delay: 5

    # - name: Ping my hosts
    #   ansible.builtin.ping:
