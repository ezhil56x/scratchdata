- name: Web deploy script
  hosts: web
  user: root
  serial: 1
  tasks:
    - name: Install system packages
      ansible.builtin.apt:
        # update_cache: yes
        pkg:
          - screen

    - name: Copy systemd
      copy: src=scratchdb.service dest=/lib/systemd/system/scratchdb.service mode=0755

    - name: Force systemd to reread configs
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Set server status to unhealthy
      copy:
        content: ""
        dest: ./unhealthy

    - name: Get Hetzner server ID
      uri:
        url: "http://169.254.169.254/hetzner/v1/metadata/instance-id"
        return_content: true
      register: server_id

    - name: Wait for Hetzner to remove node from LB
      uri:
        url: "https://api.hetzner.cloud/v1/load_balancers/{{hetzner_lb_id}}"
        return_content: true
        headers:
          Authorization: "Bearer {{hetzner_api_key}}"
      register: lb_response
      until: >-
          (
          lb_response.json.load_balancer.targets
          | selectattr('server.id', '==', server_id.content | int)
          ).0.health_status.0.status == 'unhealthy'
      retries: 5
      delay: 5
          
    - name: Get latest version URL
      uri:
        url: https://api.github.com/repos/scratchdata/scratchdb/releases/latest
        return_content: true
      register: json_response

    - name: "installing scratchdb {{ json_response.json.tag_name }}"
      loop: "{{ json_response.json.assets }}"
      when: "'_Linux_x86_64.tar.gz' in item.name"
      unarchive:
        remote_src: yes
        src: "{{ item.browser_download_url }}"
        dest: ./
        keep_newer: yes

    - name: stop go service
      systemd:
        name: scratchdb
        state: stopped

    - name: Copy scratchdb config
      copy: src=prod.toml dest=/root/prod.toml mode=0755

    - name: start go service
      systemd:
        name: scratchdb
        state: started

    - name: Set server to healthy status
      ansible.builtin.file:
        state: absent
        path: ./unhealthy

    - name: Wait for Hetzner to re-add node to LB
      uri:
        url: "https://api.hetzner.cloud/v1/load_balancers/{{hetzner_lb_id}}"
        return_content: true
        headers:
          Authorization: "Bearer {{hetzner_api_key}}"
      register: lb_response
      until: >-
          (
          lb_response.json.load_balancer.targets
          | selectattr('server.id', '==', server_id.content | int)
          ).0.health_status.0.status == 'healthy'
      retries: 5
      delay: 5

    # - name: Ping my hosts
    #   ansible.builtin.ping:
